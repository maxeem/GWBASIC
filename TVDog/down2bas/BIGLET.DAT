"Jazzin' Up Your Screen"               (from Vol. 1, No. 12)                                                            A couple of months ago, we looked at several techniques thatcould be used to draw attention  to  messages  presented  onyour video screen.  There are basically three tricks you canuse  to make someone sit up and take notice of your messages-- color, movement, and size.  In BASIC, the COLOR statementcan be used quite  easily  and  effectively  to  add  brightcolors  to  key words or phrases,  and even make them blink.The September,  1986,  "Down to  BASIC"  column  illustratedseveral  subroutines  that  use  movement to highlight thosemessages;  that column presented methods to make  the  wordsmarch onto the screen from the side, middle, and bottom.                                                                The  third  technique is,  of course,  size.  Who can ignoreyour name on the title screen of  the  program  when  it  isprinted  in  letters  two inches high?  The same people thatcan't see the "E" on the top  line  of  the  eye  charts,  Iguess.  But how is this done?  Except for the obvious choicebetween WIDTH 40 and WIDTH 80, BASIC does not normally allowthe programmer to select character size.                                                                                However,  there  is  some  help  from  an  unexpected place.Buried deep within the computer's memory is some informationthat we can use to our  advantage.  When  BASIC  is  loaded,over  sixty  thousand  bytes  of information are transferredfrom your disk  to  the  computer's  memory.  Most  of  thatinformation  serves  the  purpose of "teaching" the computerhow to interpret each of the BASIC keywords.  But there is avery important string of 1,024  bytes  that  contains  codedinformation which can be used to construct "pictures" of allof the letters,  numbers, punctuation marks, and a few otherspecial characters.                                                                                                     Our Grandy can theoretically contain up to  1,048,576  bytesof memory;  in order to keep track of all those bytes,  eachis  assigned  a  number  0  to  1,048,575.   Each  of  thoselocations  can contain an integer from 0 to 255.  With BASICloaded,  the 1024  locations  starting  at  location  number1,047,150  contain the character map information.  The eightbytes starting at  1,047,150  contain  the  information  forASCII  code 0;  the next eight bytes contain information forASCII code 1; the next eight for ASCII code 2;  and so on upthrough ASCII code 127.                                                                                                 How  is  picture  information  encoded  into  eight bytes ofmemory?  The authors of BASIC for the  Grandy  used  a  verylogical  and  efficient technique.  To understand the methodyou must first learn how to  express  a  number  in  "binarycode".  We  will  not  go  into  the details here;  but in anutshell,  here it is:  every integer from 0 to 255  can  beexpressed  in  the  form  ABCDEFGH.  Each  of  the symbols Athrough H is either a  zero  or  a  one,  according  to  thefollowing formula :                                                                                                       Number = (A x 128) + (B x 64) + (C x 32) + (D x 16)                + (E x 8) + (F x 4) + (G x 2) + (H x 1)                                                                        Believe  it  or  not,  there  is  one  and  only  one uniquecombination of zeros and ones for each of the numbers from 0to  255.  For  example,  the  number  173  is  expressed  as10101101  in  binary  code  (try  it yourself in the formulaabove).                                                                                                                 The eight codes for the capital letter "A" are 28,  54,  99,99,  127,  99,  99, and 0.  If you write each of these eightnumbers down and convert each to binary,  you will produce atable like this:                                                                                                                           28 = 0 0 0 1 1 0 0 0                                        54 = 0 0 1 1 0 1 1 0                                        99 = 0 1 1 0 0 0 1 1                                        99 = 0 1 1 0 0 0 1 1                                       127 = 0 1 1 1 1 1 1 1                                        99 = 0 1 1 0 0 0 1 1                                        99 = 0 1 1 0 0 0 1 1                                         0 = 0 0 0 0 0 0 0 0                                                                                 Take  a  pencil  and lightly shade in a "box" around each ofthe ones in the array above;  leave the zeros blank.  Lo andbehold  --  do you see the letter "A" begin to appear?  Thatis how the characters are stored in memory.  It is also  thebasis for the subroutine appearing in the listing at the endof this column.                                                                                                         That key subroutine is found in lines 770 through 860.  Whena  word or phrase of ten characters or less is passed to thesubroutine in string variable WORD$, it will be displayed inletters about two inches high (eight video lines) either  atthe  top,  in the middle,  or near the bottom of the screen.That position is determined by the  variable  LN  (for  linenumber) which must be equal to 1,  2, or 3.  Remember, WORD$must contain only ASCII  codes  from  0  to  127.  The  mostinteresting  feature  of this subroutine is that it works inlow resolution screen mode 0 (text mode) with  the  standard80 column display.                                                                                                      The DEF SEG statement in line 770 tells the computer exactlywhere in memory you will be PEEK-ing.  When BASIC encountersthe  statements  DEF  SEG  =  X  and PRINT PEEK(Y),  it willexamine memory location X times 16  plus  Y  and  print  thecontents.  Lines 780 and 790 check variables WORD$ and LN tomake  sure  they  are  within  limits.   The  FOR-NEXT  loopinvolving variable X in line 800 begins printing the lettersone line at a time.  The FOR-NEXT loop involving Y  in  line820  prints  each  letter,  number,  or special character inWORD$ one at a time.  Finally, the FOR-NEXT loop involving Zlooks at each of the eight zeros  or  ones  in  each  binarycoded number.                                                                                                           Type  in  the entire program and give it a RUN.  The programconsists of six demonstration screeens,  a "press any key tocontinue"  subroutine  (in lines 690 through 730),  and,  ofcourse,  the display subroutine.  The first demo (lines  130through  170)  presents  a  simple message.  The second demo(210-240) adds a dash of color.  The  third  demo  (280-310)shows  that  messages  do not have to appear centered on thescreen;  leading or trailing spaces  can  be  included  withWORD$.                                                                                                                  The demos in lines 350-390 and 430-480 show that there are afew  "surprise" characters.  ASCII codes 7 through 13 and 28through 31 are cursor control  codes  that  do  not  usuallydisplay  anything.   However,  in  this  subroutine,  I  wassurprised to find dots,  rings,  male and female symbols,  amusical  eighth note,  a double headed arrow,  and a pair oftriangles.  The final demo in lines 520  through  650  showsthat  the  big letters can be mixed quite easily with normalsized text for a very interesting effect.                                                                               Experiment with subroutine 770.  How can you use it in  yourprograms?  The display is a little slow,  so you do not wantto use it too often.  However,  it is very effective  for  atitle  screen or as a divider between major sections of yourprogram.  As always,  I look forward to  hearing  from  you.Write  to  me  with  questions  or comments,  in care of ONETHOUSAND.  See you next month.                              