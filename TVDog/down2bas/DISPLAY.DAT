"Moving Display Techniques"              (from Vol. 1 No. 8)                                                            Here is a question for all of you BASIC programmers --  whatcould  be  simpler than making a message appear on the videoscreen?  Of all the commands  in  the  BASIC  language,  thesimple PRINT command is one of the most commonly used,  easyto understand,  and useful functions in the book.  In  fact,when  your  objective  is  to  present  a  large  amount  ofinformation simply and quickly to a program  user,  the  oldreliable PRINT statement fits the bill perfectly.                                                                       But  occasionally,  you might want to place some informationon the screen in  some  non-standard,  eye-catching  manner.When  might  you  consider  something  like  that?  A uniquepresentation will almost always break up the monotony  of  alengthy  set  of  rules  or  instructions.  A  message whichcrawls or pops onto the screen will be remembered, making itideal for very important information -- like  your  name  onthe title screen!  Educational programs,  particularly thosefor children,  often benefit from clever (even entertaining)display methods.                                                                                                        The program listing at the end of this  article  illustratesfive  different methods that you can use to make messages inyour programs appear on the  screen  in  unusual  ways.  Thefive subroutines -- starting at lines 240,  280,  340,  400,and 470 -- all operate in the same  manner.  Before  callingany  of  the subroutines,  the variable NUM must contain thescreen line number to be  used  (from  1  to  25),  and  thevariable  TEXT$  must  contain  the  message to be displayed(which must be 80 characters or less in length).                                                                        The program listing includes  a  short  main  program  whichallows  you  to  view  each  of the five subroutines at yourleisure.  Lines 100 through 160 present a menu of  the  fivepossible  selections.  Lines  170 and 180 check the keyboardto find your selection, and the result is a number from 1 to5  stored  in  variable  X.  Lines  190  and  200  call  thesubroutine selected three times, READing TEXT$ from the DATAstatements  of lines 560 through 580 and calculating a valuefor  NUM  before  each  call.  At  the  completion  of  eachdisplay,  subroutine 620 is called to pause before repeatingthe process.                                                                                                            Subroutine 240 is the simplest of the five; it simply placesthe  message  in  TEXT$  in the middle of the screen on linenumber NUM.  Notice that the LOCATE command is used to placethe cursor at horizontal position 40  -  LEN(TEXT$)/2.  Thisinsures that half of the message will appear before position40 (the middle of the screen).                                                                                          Subroutine 280 is interesting; your message pops up onto thescreen  one letter at a time.  This is accomplished by usingMID$ to break TEXT$ into one-letter strings;  each letter isprinted  from  the  bottom  of  the  screen  up to its finalposition  to  give  the  appearance  of  vertical  movement.Printing  the  space  in  line  300 erases each letter as itmoves up the screen.                                                                                                    Subroutine 340 extends the idea of movement  by  making  themessage in TEXT$ crawl in one letter at a time from the leftside  of  the  screen.  The subroutine begins by adding somenumber of empty spaces (ASCII code 32) to TEXT$ so that  theextended  string  will  appear  to be centered when printed.Lines 350 and 360 begin by printing the  last  character  inthe string at the left margin, then the last two characters,the last three characters, and so on until the entire stringis displayed.                                                                                                           Subroutine 400 gives the impression that the string is beingconstructed  from  the  inside out.  It begins by displayingthe first and last characters in TEXT$ near  the  center  ofthe screen.  Next, the first two and last two characters arecentered  and  displayed.  This  continues  until the entirestring is displayed.  The FOR-NEXT loop involving variable Cis added to line 420 to slow things down a bit.                                                                         Subroutine 470 causes the string to appear one letter  at  atime,  although  the  order  in  which the letters appear iscompletely  random.  This  is  accomplished  using  array  P(which  must be dimensioned before the subroutine is called,see line 190 in the sample program).  Array P is  originallyloaded with the numbers 1,  2,  3,  and so on,  in line 470.The order of those numbers is scrambled  in  lines  480  and490.  Finally,  the  letters  in  TEXT$ are displayed in theorder specified by the scrambled list of numbers in array P.                                                            Take a few moments to type  in  the  program  listing  whichfollows  and  experiment  with these techniques.  If you areworking on a new program,  perhaps you already have  a  needfor  one  of these subroutines.  If not,  store them away inyour file of BASIC tricks and pull them out  the  next  timeyou  need something to "shake up" your audience.  As always,let me know what you think or what you would like to see  inthis  column;  write to me in care of the ONE THOUSAND.  Seeyou next month.                                             