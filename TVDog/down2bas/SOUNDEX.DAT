"Soundex Codes"                         (from Vol. 1 No. 10)                                                            I have taken quite a few classes throughout my long academiccareer,  but the most difficult course I  ever  took  was  asurvey  of  world history thrust upon me in the ninth grade.The course was taught by  Mr.  Barker;  he  apparently  tookdelight  in  terrorizing  small groups of pre-adolescents bylecturing far too fast for us to take notes,  surprising  uswith  all  too  frequent  "pop  quizzes",  and administeringexaminations that defied description.  Most  other  teachersprepared  tests  featuring  multiple-choice  and  true-falsequestions;  on those tests,  anyone who could flip a coin atleast  had a fighting chance.  However,  Mr.  Barker's testswere entirely fill-in-the-blank and short-answer  questions.Unless your response matched the correct answer exactly (andthat  meant  letter-for-letter) it was wrong.  No matter howhard we argued that our  answers  were  "almost"  right,  wereceived no credit.                                                                                                     In  many ways,  Mr.  Barker and BASIC on the Grandy are verysimilar.  When you compare  two  strings  using  BASIC,  thecomputer  will  refuse to accept the fact that the two wordsor phrases are "almost" equal; as far as BASIC is concerned,the   two   strings   are   either   equal   if   they   areletter-for-letter identical, or they are unequal.  In BASIC,if  you compare a string of lower-case letters with the samestring but in upper case letters,  they will be unequal.  Ifone of the strings is missing an apostrophe or a comma,  thestrings will be unequal.  If one word is misspelled or has apair  of  letters  transposed,   they   will   be   unequal.Obviously,  Mr.  Barker  probably  knew  when  an answer wasalmost right, but how can we teach the computer to recognizethe fact that two words are "almost" equal?                                                                             Computer programmers have faced this dilemma for years,  andas   a   result,   they  developed  the  Soundex  Code  (see"Approximate String Matching", ACM Computing Surveys, Volume12,  Number 4,  1980,  page 388).  The  Soundex  Code  is  atechnique  for  translating any word or phrase into a seriesof numbers.  In theory,  any two words or phrases that soundalike  will  produce the same series of numbers.  Thus,  twostrings that are "almost" equal (due  to  a  misspelling  ortypographical  error)  will  probably have identical SoundexCodes.  Although it is not fool-proof, it does provide a wayof providing the computer  with  a  little  bit  of  "commonsense".                                                                                                                 How does it work?  It is quite simple.  The letters A, E, I,O, U, H, W, and Y are ignored;  they have no significance incalculating Soundex Codes.  The letters B, F,  P,  and V aregiven codes of 1;  similarly, C, G, J, K, Q, S, X, and Z aregiven codes of 2.  The letters D and T have codes of 3; L isassigned a code number of 4.  Letters M and N correspond  tocode number 5, and the letter R is given code number 6.  TheSoundex  Code  for  the  entire word is constructed from thestring of code numbers  for  each  letter  in  the  word  orphrase.  Consecutive  occurrences  of  the same group numberare reduced to a single occurrence of that number.                                                                      Perhaps an example will make things a little  clearer.  Takethe  word "SCIENCE".  Both "S" and "C" have codes of 2.  Theletters "I" and "E" are ignored.  The letters  "N"  and  "C"produce codes of 5 and 2, and the final "E" is also ignored.Thus,  the  combined  code for "SCIENCE" is 2252.  The finalcode must not contain any repeated digits,  so  the  SoundexCode for "SCIENCE" is 252.                                                                                              The  BASIC  program listing shown at the end of this articlewill calculate the Soundex Code  for  any  word  or  phrase.Enter  the listing as shown,  type RUN,  and enter a word orphrase when prompted.  The Soundex Code will  be  calculatedand  displayed.  The  bulk  of  the  work in this program ishandled by the subroutine starting in line 170.  When a wordis passed to the routine in the string variable WORD$,  line170  begins  by initializing a few working variables so thatthey contain null strings.  The FOR-NEXT loop  beginning  inline  180  examines  each letter in WORD$ one at a time;  ifWORD$ should contain any lower case letters,  line 190  willtranslate each into its corresponding upper case equivalent.Each letter is examined in lines 200 through 250 and,  basedon that examination,  the proper DIGIT$ is added  to  CODE$.At  the  conclusion  of  the  subroutine in line 280,  CODE$contains the final Soundex Code for WORD$.                                                                              Experiment with the program a  little  while  and  you  willprobably  begin to see some immediate applications.  How canyou use Soundex Codes in your  programs?  Suppose  you  havewritten  a  data  base program (i.e.  one to store names andaddresses) and you would like to find the address  for  yourold  friend  Bob  Smythe.  However,  on this day you are notthinking very clearly and you ask the  program  to  find  anaddress   for   Bobby   Smith  --  using  his  nickname  andmisspelling his last name.  Most programs will  simply  tellyou that "no match could be found";  remember,  "Bob Smythe"does not equal "Bobby Smith".  However, if you calculate theSoundex Codes for both names,  you will find that codes  forboth  are  "1253".  Wouldn't  it  be  nice if your data baseprogram said "No exact match could  be  found;  perhaps  youmeant to enter the name Bob Smythe"?  With Soundex Codes, itis possible.                                                                                                            What about educational programs?  It is easy to discourage astudent  when  the  only  answers  he sees on the screen are"That's right!" and "Sorry!  Wrong Again!".  At  least  withSoundex  Codes you can compare the student's answer with thecorrect answer, and offer encouragement in the form of "Youranswer is almost correct.  Please check  your  spelling  andpunctuation and try again".                                                                                             I  doubt  if  Mr.  Barker  would appreciate the value of theSoundex  Code,   but  perhaps  you  will.   It  has  obviousapplications  in any program that compares strings,  such asdata  base  programs  and  educational  programs.  Save  thesubroutine  shown  in lines 170 through 280,  and find a usefor it in your next BASIC program.  As always,  I  encourageyou  to  write  to me in care of ONE THOUSAND.  See you nextmonth.                                                      